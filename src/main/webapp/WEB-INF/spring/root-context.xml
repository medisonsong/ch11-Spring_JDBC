<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
       
       <!-- 빈 자동 스캔 / servlet-context.xml에서 Controller를 이미 자동스캔 설정을 했기 때문에
       		아래 설정에서는 Controller를 제외시키고 자동 스캔을 해야함 -->
       <context:component-scan base-package="kr.spring.board"> <!-- 이렇게 하면 컨트롤러도 포함되기 때문에  -->
       		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> <!-- 컨트롤러를 의미하는 표현을 넣어서 제외시킴 -->
       </context:component-scan>
       
		<context:property-placeholder location="classpath:config/jdbc.properties"/>
		
		<!-- 커넥션 풀을 이용한 DataSource 설정 -->
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
			<property name="driverClassName" value="${jdbc.driverClassName}"/>
			<property name="url" value="${jdbc.url}"/>
			<property name="username" value="${jdbc.username}"/>
			<property name="password" value="${jdbc.password}"/>
			<!-- 최대 커넥션 개수 -->
			<property name="maxActive" value="50"/>
			<!-- 접속이 없을 경우 최대 유지 커넥션 개수 -->
			<property name="maxIdle" value="30"/>
			<!-- 접속이 없을 경우 최소 유지 커넥션 개수 -->
			<property name="minIdle" value="20"/>
			<!-- 최대 대기시간(초) : 초과시 연결 실패 오류 발생 -->
			<property name="maxWait" value="5"/>
		</bean>
		
		<!-- JdbcTemplate 객체 생성 -->
		<bean name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
			<property name="dataSource" ref="dataSource"/>
		</bean>
		
		<!-- JDBC 기반 트랜잭션 관리자 설정 -->
		<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource"/>
		
		<!-- 어노테이션 방식으로 트랜잭션 처리 -->
		<tx:annotation-driven transaction-manager="transactionManager"/>
		
</beans>